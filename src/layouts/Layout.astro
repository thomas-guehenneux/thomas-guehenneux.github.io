---
import BaseHead from '@/components/BaseHead.astro'
import Header from '@/components/Header.astro'
import Footer from '@/components/Footer.astro'

interface Props {
  title: string
  description: string
  image?: string
  availableLocales: ('ja' | 'en')[]
  lang: 'ja' | 'en'
}

const { title, description, image, availableLocales, lang } = Astro.props
---

<script is:inline>
  function setThemeWeb(document) {
    const getThemePreference = () => {
      if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
        return localStorage.getItem('theme')
      }
    }
    const isDark = getThemePreference() === 'dark'
    document.documentElement.classList[isDark ? 'add' : 'remove']('dark')

    if (typeof localStorage !== 'undefined') {
      const observer = new MutationObserver(() => {
        const isDark = document.documentElement.classList.contains('dark')
        localStorage.setItem('theme', isDark ? 'dark' : 'light')
      })
      observer.observe(document.documentElement, { attributes: true, attributeFilter: ['class'] })
    }
  }

  setThemeWeb(document)

  document.addEventListener('astro:before-swap', (ev) => {
    setThemeWeb(ev.newDocument)
  })
</script>

<!-- <script>
  const observer = new MutationObserver(() => {
    const isDark = document.documentElement.classList.contains('dark')
    localStorage.setItem('theme', isDark ? 'dark' : 'light')
  })
  observer.observe(document.documentElement, { attributes: true, attributeFilter: ['class'] })
  document.addEventListener('astro:after-swap', () => {
    localStorage.theme === 'dark'
      ? document.documentElement.classList.add('dark')
      : document.documentElement.classList.add('light')
  })
</script> -->
<html lang={lang}>
  <head>
    <BaseHead title={title} description={description} image={image} availableLocales={availableLocales} />
  </head>
  <body>
    <Header availableLocales={availableLocales} lang={lang} />
    <slot />
    <Footer lang={lang} />
  </body>
</html>
