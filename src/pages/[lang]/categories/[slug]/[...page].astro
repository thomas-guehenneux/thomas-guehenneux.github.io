---
import homeImage from '@/assets/home.webp'
import Layout from '@/layouts/Layout.astro'
import type { GetStaticPathsOptions } from 'astro'
import { getImage } from 'astro:assets'
import { getCollection } from 'astro:content'
import CategoryNav from '~/components/CategoryNav.astro'
import PostCard from '~/components/PostCard.astro'
import ThePagination from '~/components/ThePagination.astro'

const allPosts = await getCollection('posts', ({ data }) => data.categories !== null)

export async function getStaticPaths({ paginate }: GetStaticPathsOptions) {
  const langs: ('ja' | 'en')[] = ['ja', 'en']
  const allPosts = (await getCollection('posts', ({ data }) => data.categories !== null)).sort((a, b) => {
    return new Date(a.data.date) > new Date(b.data.date) ? -1 : 1
  })
  const categories = await getCollection('categories')
  return langs.flatMap((lang) => {
    return categories
      .flatMap((category) => {
        const filteredPosts = allPosts
          .filter(
            (post) =>
              post.slug.startsWith(lang) &&
              post.data.categories?.some((postCategory) => postCategory.slug === category.slug),
          )
          .map((post) => {
            return post
          })

        if (filteredPosts.length === 0) return undefined
        return paginate(filteredPosts, {
          params: { lang, slug: category.slug },
          pageSize: 9,
        })
      })
      .filter(Boolean)
  })
}

const { page } = Astro.props
const { lang, slug: category } = Astro.params

function getAvailableLocales() {
  return allPosts
    .filter((post) => post.data.categories !== null)
    .filter((post) => post.data.categories?.some((postCategory) => postCategory.slug === category))
    .flatMap((post) => post.slug.slice(0, 2)) as ('ja' | 'en')[]
}

const optimizedBackground = await getImage({ src: homeImage, format: 'webp' })

// Get all categories with posts in current locale
const categories = await getCollection('posts', ({ slug }) => {
  return slug.startsWith(lang)
}).then(async (posts) => {
  const categorySlugs = posts
    .map((post) => post.data.categories?.map((category) => category.slug))
    .filter(Boolean)
    .flat()
  return await getCollection('categories', ({ slug }) => {
    return categorySlugs.includes(slug)
  })
})
---

<Layout
  title="TO_SET"
  image=""
  description="TO_SET"
  availableLocales={getAvailableLocales()}
  lang={lang as 'ja' | 'en'}
>
  <div class="relative">
    <div
      style={`background-image: url(${optimizedBackground.src});`}
      class="min-h-[500px] w-full bg-cover bg-center after:absolute after:size-full after:bg-black/40"
    >
    </div>
  </div>
  <div class="container max-w-7xl">
    <CategoryNav {categories} {lang} class="pb-2.5 pt-12" />
    <ul class="grid grid-cols-1 gap-x-6 gap-y-8 py-12 md:grid-cols-3">
      {
        page.data.map((post) => (
          <li>
            <PostCard {post} {lang} />
          </li>
        ))
      }
    </ul>
    {
      page.size > 1 && (
        <div class="p-5 md:p-20">
          <ThePagination currentPage={page.currentPage} lastPage={page.lastPage} url={page.url} />
        </div>
      )
    }
  </div>
</Layout>
